<?xml version="1.0" encoding="UTF-8"?>
<!-- ====================================================================== 
	
Ant script for automated release and deploy of update site. Sample usage:
First, Run the build script:
	mvn clean integration-test
Alternatively, use a version qualifier prefix:
	mvn clean integration-test -Dqualifier_default_prefix=PR1-

Run this repo upload script:
It requires a git repo of the project updateSite Git repo, as specified by -DupdateSiteGitRepo
	ant -f repo-release-script.xml uploadRelease -DfromScratch=true -DupdateSiteGitURL=https://site.com
     ====================================================================== -->
<project name="project" >

	<property name="localStagingSiteDir" location="bin-maven/updateSite/" />
	<property name="repoDest" location="${localStagingSiteDir}/ddt.feature-repo" />
	<property name="fromScratch">false</property>

	<property name="gitLocation">git</property>
	<property name="repoSrc" location="bin-maven/ddt.repository/repository" />
	<property name="compositeSrc" location="org.dsource.ddt-build/composite-repository" />
	

	<target name="CopyRepoToStagingSite">
		<mkdir dir="${repoDest}"/>
		<copy verbose="true" todir="${repoDest}">
			<fileset dir="${repoSrc}"/>
		</copy>
	</target>
	
	<target name="initStagingSite.FromScratch" if="${fromScratch}">
		<mkdir dir="${localStagingSiteDir}"/>
		
		<exec dir="${localStagingSiteDir}" executable="${gitLocation}" >
			<arg line="init"/>
		</exec>
		
		<copy verbose="true" todir="${localStagingSiteDir}">
			<fileset dir="${compositeSrc}" erroronmissingdir="false"/>
		</copy>
		
		<antcall target="CopyRepoToStagingSite"/>
		
		<property name="gitPushCommandExtra" value=" --force" />
	</target>
	
	<target name="initStagingSite.FromExisting" unless="${fromScratch}">
		<mkdir dir="${localStagingSiteDir}"/>
		
		<fail unless="updateSiteGitURL"/>
		<exec dir="${localStagingSiteDir}" executable="${gitLocation}" >
			<arg line="clone ${updateSiteGitURL} ."/>
		</exec>
	
		<delete verbose="true">
			<fileset dir="${repoDest}" erroronmissingdir="false" includes="**/*.jar"/>
		</delete>
		
		<antcall target="CopyRepoToStagingSite"/>
		<property name="gitPushCommandExtra" value=" " />
	</target>
	
	<target name="initStagingSite" depends="initStagingSite.FromExisting, initStagingSite.FromScratch">

		<exec dir="${localStagingSiteDir}" executable="${gitLocation}" >
			<arg line="add -A"/>
		</exec>
		<exec dir="${localStagingSiteDir}" executable="${gitLocation}" >
			<arg line="commit -m"/>
			<arg value="update site"/>
		</exec>
	</target>

	<target name="uploadRelease" depends="initStagingSite">
		<exec dir="${localStagingSiteDir}" executable="${gitLocation}" >
			<arg line="status"/>
		</exec>
		
		<fail unless="updateSiteGitURL"/>
		<exec dir="${localStagingSiteDir}" executable="${gitLocation}" >
			<arg line="push ${updateSiteGitURL} ${gitPushCommandExtra}"/>
		</exec>
	</target>

<!-- ======================================================================
	This task must be run from within eclipse, example:
	eclipse -application org.eclipse.ant.core.antRunner -console -consolelog -f repo-release-script.xml createCompositeRepo -updateSiteGitRepo=../ddt.updates-PR
     ====================================================================== -->
	<target name="createCompositeRepo">
		<p2.composite.repository>
			<repository location="${compositeSrc}" name="DDT repository" compressed="false" />
			<add>
				<repository location="http://download.eclipse.org/releases/kepler" />
				<repository location="ddt.feature-repo" />
			</add>
		</p2.composite.repository>
	</target>
	
</project>
